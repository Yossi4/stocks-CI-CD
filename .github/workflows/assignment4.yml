name: assignment4

on:
  workflow_dispatch:  # Triggered manually from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest  # The job will run on a fresh Ubuntu environment

    steps:
      - name: Checkout repository  # Step 1: Checkout the code from your repository
        uses: actions/checkout@v2  # This allows GitHub Actions to access your repository

      - name: Set up Docker  # Step 2: Install Docker
        uses: docker/setup-buildx-action@v2  # Action to set up Docker for the job

      - name: Install Docker Compose  # Step 3: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose  # Make docker-compose executable

      - name: Build Docker images  # Step 4: Build Docker images for the services
        id: build_images
        run: |
          start_time=$(date -Iminutes)  # Capture the start time
          echo "Start time: $start_time" > log.txt  # Overwrite log.txt initially to set start time
          echo "Yossi Peleg" >> log.txt  # Add your name

          set +e
          docker-compose -f docker-compose.yml build  # Build images
          build_status=$?
          set -e

          if [ $build_status -eq 0 ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
          fi

      - name: Upload log.txt as artifact  # Upload the log.txt file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: ignore  # The artifact's name
          path: log.txt  # The file to upload

  test:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job to complete

    steps:
      - name: Checkout repository  # Step 1: Checkout the code from your repository
        uses: actions/checkout@v2  # This allows GitHub Actions to access your repository


      - name: Install Docker Compose  # Step 3: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose  # Make docker-compose executable

      - name: Set up Python environment  # Step 2: Install Python and pytest
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip
          pip3 install pytest

      - name: Download log artifact  # Step 3: Download the log.txt file from the build job
        uses: actions/download-artifact@v4
        with:
          name: ignore  # The artifact's name
          path: ./  # Download it to the current directory

      - name: Docker Compose up  # Step 5: Start the application
        run: |
          set +e
          docker-compose -f docker-compose.yml up -d
          up_status=$?
          set -e
  
          if [ $up_status -eq 0 ]; then
            echo "Containers up and running" >> log.txt  # Append status
          else
            echo "Containers failed to run" >> log.txt  # Append failure status
          fi

      - name: Wait for stocks service to be ready  # Step 6: Wait until the service is ready
        run: |
           for i in {1..30}; do  # Retry 30 times
              if curl --silent --fail http://localhost:5001/stocks; then
                echo "Stocks service is up!"
                break
              else
                echo "Waiting for stocks service to be available..."
                sleep 5
              fi
            done

      - name: Check running containers with docker ps  # Step 4: Verify containers are running
        run: |
          echo "Listing all running containers:"
          docker ps  # List all running containers
  

      - name: Run tests  # Step 4: Run pytest
        run: |
          pytest tests/assn4_tests.py > assn4_test_results.txt || true

      - name: Log test results status  # Update log.txt with test results
        run: |
          if grep -q "FAILURES" assn4_test_results.txt; then
            echo "tests failed" >> log.txt  # Append "tests failed"
          else
            echo "tests succeeded" >> log.txt  # Append "tests succeeded"
          fi

      
      - name: Upload test results  # Upload the pytest results file
        uses: actions/upload-artifact@v4
        with:
          name: test-results  # Artifact name for test results
          path: assn4_test_results.txt

      - name: Upload log file  # Upload the log file
        uses: actions/upload-artifact@v4
        with:
          name: log  # Artifact name for the log file
          path: log.txt
  
