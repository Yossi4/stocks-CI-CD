name: assignment4

on:
  workflow_dispatch:  # Triggered manually from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest  # The job will run on a fresh Ubuntu environment

    steps:
      - name: Checkout repository  # Step 1: Checkout the code from your repository
        uses: actions/checkout@v2

      - name: Set up Docker  # Step 2: Install Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose  # Step 3: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker images  # Step 4: Build Docker images for the services
        run: |
          start_time=$(date -Iminutes)
          echo "Start time: $start_time" > log.txt
          echo "Yossi Peleg" >> log.txt

      - name: Upload initial log.txt as artifact  # Step 5: Upload the dummy artifact
        uses: actions/upload-artifact@v4
        with:
          name: ignore  # Dummy artifact name
          path: log.txt

  test:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job to complete

    steps:
      - name: Checkout repository  # Step 1: Checkout the code from your repository
        uses: actions/checkout@v2

      - name: Download dummy log.txt artifact  # Step 2: Download the dummy artifact
        uses: actions/download-artifact@v4
        with:
          name: ignore  # Dummy artifact name
          path: .

      - name: Run pytest and append results to log.txt  # Step 3: Run tests and update log.txt
        run: |
          pytest tests/assn4_tests.py > assn4_test_results.txt || true
          cat assn4_test_results.txt
          if grep -q "FAILURES" assn4_test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload test results artifact  # Step 4: Upload the test results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results  # Name of the test results artifact
          path: assn4_test_results.txt

      - name: Upload updated log.txt as final artifact  # Step 5: Upload the updated log.txt
        uses: actions/upload-artifact@v4
        with:
          name: log  # Final artifact name
          path: log.txt
